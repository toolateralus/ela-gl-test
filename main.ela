import gl::*;
import fs::*;
import fmt::*;
import time::*;
import arena::*;
import math::*;

struct Vertex {
  position: Vec3,
  normal:   Vec3,
  texcoord: Vec2,
}

impl Vertex {
  fn new(position: Vec3, normal: Vec3, texcoord: Vec2) -> Self {
    return .{
      position: position,
      normal: normal,
      texcoord: texcoord,
    }
  }
}

impl Vec3 {
  fn new(x: f32, y: f32, z: f32) -> Self {
    return .{
      x: x,
      y: y,
      z: z,
    }
  }
}

impl Vec2 {
  fn new(x: f32, y: f32) -> Self {
    return .{
      x: x,
      y: y,
    }
  }
}

struct GeneralBuffer!<T> {
  vao: s32,
  vbo: s32,
  descriptor: String,
}

impl!<T> GeneralBuffer!<T> {
  fn new() -> Self {
    mut buffer: #себя;
    glGenVertexArrays(1, &mut buffer.vao);
    glGenBuffers(1, &mut buffer.vbo);
    type := typeof(T);
    stride := sizeof(T);

    glBindVertexArray(buffer.vao);
    glBindBuffer(GL::ARRAY_BUFFER, buffer.vbo);

    options := FormatOptions::default();
    mut descriptor: StringBuilder;
    mut temp_alloc := Arena::new(8192, ArenaFlags::Align);

    defer temp_alloc.deinit();

    descriptor.append("buffer descriptor:\n");
    
    descriptor.appendf("Buffer { vao:   %, vbo:    % }\n", (buffer.vao, buffer.vbo), options);

  
    defer { 
      descriptor.deinit();
    }

    mut index := 0;

    for field in type.fields {
      descriptor.appendf("  %s { index: %d, offset: %d }\n", (field.type.name, index, field.offset), options);

      if field.type.is_float() {
        glVertexAttribPointer(index, field.size as s32, GL::FLOAT, false, stride, field.offset as *const void);
      } else if field.type.is_integral() {
        glVertexAttribIPointer(index, field.size as s32, GL::INT, stride, field.offset as *const void);
      } else if field.type == typeof(Mat4) {
        for i in 0..4 {
          offset := field.offset + i * sizeof(Vec4);
          
          descriptor.appendf("    f32 { index: %, offset: % }\n", (index, offset), options);

          glVertexAttribPointer(index, 4, GL::FLOAT, false, stride, offset as *const void);
          glEnableVertexAttribArray(index);
          glVertexAttribDivisor(index, 1);
          index += 1;
        }
        continue;
      } else if field.type == typeof(Vec4) {
        glVertexAttribPointer(index, 4, GL::FLOAT, false, stride, field.offset as *const void);
      } else if field.type == typeof(Vec3) {
        glVertexAttribPointer(index, 3, GL::FLOAT, false, stride, field.offset as *const void);
      } else if field.type == typeof(Vec2) {
        glVertexAttribPointer(index, 2, GL::FLOAT, false, stride, field.offset as *const void);
      } else {
        println("unsupported type in GeneralBuffer, T can only contain (floats|ints|Vec2|Vec3|Vec4|Mat4)");
      }
      glEnableVertexAttribArray(index);
      index ++;
    }

    buffer.descriptor = descriptor.get_string();

    glBindVertexArray(0);
    glBindBuffer(GL::ARRAY_BUFFER, 0);

    return buffer;
  }

  fn bind_and_buffer_data(self, slice: Slice!<T>) {
    glBindVertexArray(self.vao);
    glBindBuffer(GL::ARRAY_BUFFER, self.vbo);
    glBufferData(GL::ARRAY_BUFFER, sizeof(Vertex) * slice.length, slice.data, GL::STATIC_DRAW);
  }

  fn unbind(self) {
    glBindVertexArray(0);
    glBindBuffer(GL::ARRAY_BUFFER, 0);
  }
}

NUM_VERTICES :: 36;

fn cube(scale: f32) -> Vertex[] {
  return Vertex[]::init(.[
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale))
  ]);
}

fn print_vertices(vertices: Slice!<Vertex>) {
  printf("vertices = ["c);
  for i in 0..vertices.length {
    vert := vertices.data[i];
    printf("  pos: %.1f %.1f %.1f, normal: %.1f %.1f %.1f, texcoord: %.1f %.1f\n"c,
      vert.position.x, vert.position.y, vert.position.z,
      vert.normal.x, vert.normal.y, vert.normal.z,
      vert.texcoord.x, vert.texcoord.y);
    }
  printf("]\n"c);
}

struct Cube {
  scale:    Vec3,
  position: Vec3,
  rotation: Vec3,
  vertices: *const List!<Vertex>,
}

impl Cube {
  fn new(scale: f32) -> Self {
    #static mut vertices: Vertex[];

    if vertices.is_empty() {
      vertices = cube(1.0);
    }

    return .{
      vertices: &const vertices,
      scale: Vec3::new(scale, scale, scale),
      position: .{},
      rotation: .{}
    }
  }

  fn default() -> Cube {
    return Cube::new(1.0);  
  }

  fn set_position(*mut self, position: Vec3) {
    self.position = position;
  }

  fn set_rotation(*mut self, rotation: Vec3) {
    self.rotation = rotation;
  }

  fn set_scale(*mut self, scale: Vec3) {
    self.scale = scale;
  }

  fn vertex_slice(self) -> Slice!<Vertex> {
    return self.vertices.as_slice(0..self.vertices.length);
  }

  matrix :: фн(себя) -> Mat4 {
    возврат Mat4::translation(себя.position) * 
            Mat4::rotation(себя.rotation) * 
            Mat4::scalar(себя.scale);
  }
}

маин :: фн () {
  mut window := Window::create(800, 600, "Привет, Мир!");
  glEnable(GL::DEPTH_TEST);
  glClearColor(0.005, 0.005, 0.005, 1.0);
  
  buffer := GeneralBuffer!<Vertex>::new();
  println(buffer.descriptor);

  mut shader: Shader;
  {
    mut vertex := File::read_all("shader/vert.glsl").unwrap();
    mut fragment := File::read_all("shader/frag.glsl").unwrap();
    shader = Shader::create(vertex, fragment);
    shader.use();
    vertex.deinit();
    fragment.deinit();
  }

  mut key_buffer: char[];
  {
    glfwSetWindowUserPointer(window.handle, &mut key_buffer);

    window.set_key_callback(fn(window: *mut GLFWwindow, key: s32, scancode: s32, action: s32, mod: s32) {
      data : *mut List!<char> = glfwGetWindowUserPointer(window);
      if action == GLFW::PRESS && key == GLFW::KEY_C && mod & GLFW::MOD_CONTROL {
        glfwTerminate();
      }
      if action == GLFW::PRESS || action == GLFW::REPEAT {
        if key >= GLFW::KEY_A && key <= GLFW::KEY_Z {
          // Handle alphabetic keys
          if mod & GLFW::MOD_SHIFT {
            data.push(key as char); // Uppercase
          } else {
            data.push(key as char + 'a' - 'A'); // Lowercase
          }
        } else if key >= GLFW::KEY_0 && key <= GLFW::KEY_9 {
          // Handle numeric keys
          if mod & GLFW::MOD_SHIFT {
            switch key {
              GLFW::KEY_1 => data.push('!'),
              GLFW::KEY_2 => data.push('@'), 
              GLFW::KEY_3 => data.push('#'), 
              GLFW::KEY_4 => data.push('$'), 
              GLFW::KEY_5 => data.push('%'), 
              GLFW::KEY_6 => data.push('^'), 
              GLFW::KEY_7 => data.push('&'), 
              GLFW::KEY_8 => data.push('*'), 
              GLFW::KEY_9 => data.push('('), 
              GLFW::KEY_0 => data.push(')'), 
            } 
          } else {
            data.push(key as char);
          }
        } else {
          switch key {
            GLFW::KEY_BACKSPACE: {
              if data.length > 0 {
                data.pop();
              }
            }
            GLFW::KEY_ENTER: {
              data.push('\n');
            }
            GLFW::KEY_TAB: {
              data.push('\t');
            }
            GLFW::KEY_SPACE: {
              data.push(' ');
            }
          } 
        }
      }
    });
  }

  mut model: Cube; 
  {
    model = Cube::new(0.1);
    model.set_position(Vec3::new(0.0, 0.0, -5.0));
  }

  mut camera: Camera;
  {
    fov := 45.0;
    aspect_ratio := 800.0 / 600.0;
    near := 0.1;
    far := 100.0;
    camera = Camera::new(Vec3::up(), fov, aspect_ratio, near, far);
    camera.position = Vec3::new(0.0, 0.0, 3.0);
    camera.target = model.position;
  }

  // Lighting uniforms.
  {
    lightColor := Vec3::new(0.0, 1.0, 1.0);
    objectColor := Vec3::new(1.0, 0.25, 0.31);
    lightPos :=  Vec3::new(0.0, 1.0, 1.0);
    shader.set("lightPos", lightPos);
    shader.set("lightColor", lightColor);
    shader.set("objectColor", objectColor);
    shader.set("specularStrength", 1.5);
    shader.set("ambientStrength", 1.0);
  }

  model_pos := Vec3::new(0.0, 0.0, -5.0);

  buffer.bind_and_buffer_data(model.vertex_slice());

  пока !window.should_close() {
    пока key_buffer.length > 0 {
      move_vector := матч key_buffer.pop() {
        'w' => Vec3::new(0.0, 0.0, -1.0),
        'a' => Vec3::new(1.0, 0.0, 0.0),
        's' => Vec3::new(0.0, 0.0, 1.0),
        'd' => Vec3::new(-1.0, 0.0, 0.0),
        else => Vec3::zero()
      };
      model.position = model.position + move_vector;
      printf("moving := %.1f, %.1f, %.1f\n"c, model.position.x, model.position.y, model.position.z);
    }
    
    // Camera stuff.
    matrix := model.matrix();
    camera.target = model.position;
    camera.update();
    viewPos := camera.view.get_translation();
    shader.set("viewPos", viewPos);
    shader.set("model", matrix);
    shader.set("view", camera.view);
    shader.set("projection", camera.projection);

    glClear(GL::COLOR_BUFFER_BIT | GL::DEPTH_BUFFER_BIT);
    glDrawArrays(GL::TRIANGLES, 0, NUM_VERTICES);

    window.present();

  }
}