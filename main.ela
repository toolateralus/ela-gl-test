#import gl;
#import file;
#import format;
#import time;
#import memory;

Vertex :: struct {
  position: Vec3,
  normal:   Vec3,
  texcoord: Vec2,
}

impl Vertex {
  new :: fn(position: Vec3, normal: Vec3, texcoord: Vec2) -> #self {
    return .{
      position: position,
      normal: normal,
      texcoord: texcoord,
    }
  }
}

impl Vec3 {
  new :: fn(x: f32, y, z) -> #self {
    return .{
      x: x,
      y: y,
      z: z,
    }
  }
}

impl Vec2 {
  new :: fn(x: f32, y) -> #self {
    return .{
      x: x,
      y: y,
    }
  }
}

impl Field[] {
  order_by :: fn(self, predicate: fn* (Field*, Field*) -> bool) -> Field[] {
    new_list := self.clone();
    for i in 0..new_list.length {
      for j in (i+1)..new_list.length {
        if predicate(&new_list.data[i], &new_list.data[j]) {
          temp := new_list.data[i];
          new_list.data[i] = new_list[j];
          new_list.data[j] = temp;
        }
      }
    }
    return new_list;
  }
}

GeneralBuffer :: struct!<T> {
  vao: s32,
  vbo: s32,
  descriptor: String,
}

impl!<T> GeneralBuffer!<T> {
  new :: fn() -> #self {
    buffer: #себя;
    glGenVertexArrays(1, &buffer.vao);
    glGenBuffers(1, &buffer.vbo);
    type := typeof(T);
    index := 0;
    stride := sizeof(T);

    glBindVertexArray(buffer.vao);
    glBindBuffer(GL::ARRAY_BUFFER, buffer.vbo);

    descriptor: String_Builder;
    options := Format_Options::default();
    temp_alloc: Tracking_Allocator;
    defer temp_alloc.deinit();

    descriptor.append("buffer descriptor:\n");
    descriptor.appendf("Buffer { vao:   %, vbo:    % }\n", 
      .[
        any::from(&buffer.vao), 
        any::from(&buffer.vbo)
      ], 
      options
    );

    defer { 
      descriptor.deinit();
    }

    ordered_fields := type.fields.order_by(fn(a: Field*, b) -> bool {
      return a.offset < b.offset;
    });

    for field in ordered_fields {
      
      descriptor.appendf("  % { index: %, offset: % }\n", .[
        any::from(&field.type.name),
        any::from(&index),
        any::from(&field.offset)
      ], options);

      if field.type.is_float() {
        glVertexAttribPointer(index, field.size as s32, GL::FLOAT, false, stride, field.offset as void*);
      } else if field.type.is_integral() {
        glVertexAttribIPointer(index, field.size as s32, GL::INT, stride, field.offset as void*);
      } else if field.type == typeof(Mat4) {
        for i in 0..4 {
          offset := field.offset + i * sizeof(Vec4);
          
          descriptor.appendf("    f32 { index: %, offset: % }\n", .[
            any::from(&index), 
            any::from(&offset)
          ], options);

          glVertexAttribPointer(index, 4, GL::FLOAT, false, stride, offset as void*);
          glEnableVertexAttribArray(index);
          glVertexAttribDivisor(index, 1);
          index += 1;
        }
        continue;
      } else if field.type == typeof(Vec4) {
        glVertexAttribPointer(index, 4, GL::FLOAT, false, stride, field.offset as void*);
      } else if field.type == typeof(Vec3) {
        glVertexAttribPointer(index, 3, GL::FLOAT, false, stride, field.offset as void*);
      } else if field.type == typeof(Vec2) {
        glVertexAttribPointer(index, 2, GL::FLOAT, false, stride, field.offset as void*);
      } else {
        println("unsupported type in GeneralBuffer, T can only contain (floats|ints|Vec2|Vec3|Vec4|Mat4)");
      }
      glEnableVertexAttribArray(index);
      index ++;
    }

    buffer.descriptor = descriptor.get_string();

    glBindVertexArray(0);
    glBindBuffer(GL::ARRAY_BUFFER, 0);

    return buffer;
  }

  bind_and_buffer_data :: fn(self, slice: Slice!<T>) {
    glBindVertexArray(self.vao);
    glBindBuffer(GL::ARRAY_BUFFER, self.vbo);
    glBufferData(GL::ARRAY_BUFFER, sizeof(Vertex) * slice.length, slice.data, GL::STATIC_DRAW);
  }

  unbind :: fn(self) {
    glBindVertexArray(0);
    glBindBuffer(GL::ARRAY_BUFFER, 0);
  }
}

NUM_VERTICES :: 36;

cube :: fn(scale: f32) -> Vertex[] {
  return Vertex[]::init(.[
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale))
  ]);
}

print_vertices :: fn(vertices: Slice!<Vertex>) {
  printf("vertices = ["c);
  for i in 0..vertices.length {
    vert := vertices.data[i];
    printf("  pos: %.1f %.1f %.1f, normal: %.1f %.1f %.1f, texcoord: %.1f %.1f\n"c,
      vert.position.x, vert.position.y, vert.position.z,
      vert.normal.x, vert.normal.y, vert.normal.z,
      vert.texcoord.x, vert.texcoord.y);
    }
  printf("]\n"c);
}

Cube :: struct {
  scale:    Vec3,
  position: Vec3,
  rotation: Vec3,
  vertices: Vertex[]*,
}

impl Cube {
  new :: fn(scale: f32) -> #self {
    #static vertices : Vertex[]; 
    if vertices.length == 0 {
      vertices = cube(1.0);
    }

    return .{
      vertices: &vertices,
      scale: Vec3::new(scale, scale, scale),
      position: .{},
      rotation: .{}
    }
  }

  default :: fn() -> Cube {
    return Cube::new(1.0);  
  }

  set_position :: fn(self*, position: Vec3) {
    self.position = position;
  }

  set_rotation :: fn(self*, rotation: Vec3) {
    self.rotation = rotation;
  }

  set_scale :: fn(self*, scale: Vec3) {
    self.scale = scale;
  }

  vertex_slice :: fn(self) -> Slice!<Vertex> {
    return self.vertices.as_slice(0..self.vertices.length);
  }

  matrix :: фн(себя) -> Mat4 {
    возврат Mat4::translation(себя.position) * 
            Mat4::rotation(себя.rotation) * 
            Mat4::scalar(себя.scale);
  }
}

маин :: фн () {
  window := Window::create(800, 600, "Привет, Мир!");
  glEnable(GL::DEPTH_TEST);
  glClearColor(0.005, 0.005, 0.005, 1.0);
  
  buffer := GeneralBuffer!<Vertex>::new();
  println(buffer.descriptor);

  shader: Shader;
  {
    vertex := File::read_all("shader/vert.glsl").unwrap();
    fragment := File::read_all("shader/frag.glsl").unwrap();
    shader = Shader::create(vertex, fragment);
    shader.use();
    vertex.deinit();
    fragment.deinit();
  }

  key_buffer: char[];
  {
    glfwSetWindowUserPointer(window.handle, &key_buffer);

    window.set_key_callback(fn(window: GLFWwindow*, key: s32, scancode: s32, action: s32, mod: s32) {
      data : char[]* = glfwGetWindowUserPointer(window);
      if action == GLFW::PRESS && key == GLFW::KEY_C && mod & GLFW::MOD_CONTROL {
        glfwTerminate();
      }
      if action == GLFW::PRESS || action == GLFW::REPEAT {
        if key >= GLFW::KEY_A && key <= GLFW::KEY_Z {
          // Handle alphabetic keys
          if mod & GLFW::MOD_SHIFT {
            data.push(key as char); // Uppercase
          } else {
            data.push(key as char + 'a' - 'A'); // Lowercase
          }
        } else if key >= GLFW::KEY_0 && key <= GLFW::KEY_9 {
          // Handle numeric keys
          if mod & GLFW::MOD_SHIFT {
            switch key {
              GLFW::KEY_1 => data.push('!'),
              GLFW::KEY_2 => data.push('@'), 
              GLFW::KEY_3 => data.push('#'), 
              GLFW::KEY_4 => data.push('$'), 
              GLFW::KEY_5 => data.push('%'), 
              GLFW::KEY_6 => data.push('^'), 
              GLFW::KEY_7 => data.push('&'), 
              GLFW::KEY_8 => data.push('*'), 
              GLFW::KEY_9 => data.push('('), 
              GLFW::KEY_0 => data.push(')'), 
            } 
          } else {
            data.push(key as char);
          }
        } else {
          switch key {
            GLFW::KEY_BACKSPACE: {
              if data.length > 0 {
                data.pop();
              }
            }
            GLFW::KEY_ENTER: {
              data.push('\n');
            }
            GLFW::KEY_TAB: {
              data.push('\t');
            }
            GLFW::KEY_SPACE: {
              data.push(' ');
            }
          } 
        }
      }
    });
  }

  model: Cube; 
  {
    model = Cube::new(0.1);
    model.set_position(Vec3::new(0.0, 0.0, -5.0));
  }

  camera: Camera;
  {
    fov := 45.0;
    aspect_ratio := 800.0 / 600.0;
    near := 0.1;
    far := 100.0;
    camera = Camera::new(Vec3::up(), fov, aspect_ratio, near, far);
    camera.position = Vec3::new(0.0, 0.0, 3.0);
    camera.target = model.position;
  }

  // Lighting uniforms.
  {
    lightColor := Vec3::new(0.0, 1.0, 1.0);
    objectColor := Vec3::new(1.0, 0.25, 0.31);
    lightPos :=  Vec3::new(0.0, 1.0, 1.0);
    shader.set_vec3("lightPos", &lightPos);
    shader.set_vec3("lightColor", &lightColor);
    shader.set_vec3("objectColor", &objectColor);
    shader.set_float("specularStrength", 1.5);
    shader.set_float("ambientStrength", 1.0);
  }

  model_pos := Vec3::new(0.0, 0.0, -5.0);

  buffer.bind_and_buffer_data(model.vertex_slice());

  пока !window.should_close() {
    пока key_buffer.length > 0 {
      move_vector := матч key_buffer.pop() {
        'w' => Vec3::new(0.0, 0.0, -1.0),
        'a' => Vec3::new(1.0, 0.0, 0.0),
        's' => Vec3::new(0.0, 0.0, 1.0),
        'd' => Vec3::new(-1.0, 0.0, 0.0),
        else => Vec3::zero()
      };
      model.position = model.position + move_vector;
      printf("moving := %.1f, %.1f, %.1f\n"c, model.position.x, model.position.y, model.position.z);
    }
    
    // Camera stuff.
    matrix := model.matrix();
    camera.target = model.position;
    camera.update();
    viewPos := camera.view.get_translation();
    shader.set_vec3("viewPos", &viewPos);
    shader.set_mat4("model", &matrix);
    shader.set_mat4("view", &camera.view);
    shader.set_mat4("projection", &camera.projection);

    glClear(GL::COLOR_BUFFER_BIT | GL::DEPTH_BUFFER_BIT);
    glDrawArrays(GL::TRIANGLES, 0, NUM_VERTICES);

    window.present();

  }
}