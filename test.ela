#import format;

Vec3 :: struct {
  x: f32,
  y: f32,
  z: f32
}

Vec2 :: struct {
  x: f32,
  y: f32
}

Vertex :: struct {
  position: Vec3,
  normal:   Vec3,
  texcoord: Vec2,
}

impl Vertex {
  new :: fn(position: Vec3, normal: Vec3, texcoord: Vec2) -> #self {
    return .{
      position: position,
      normal: normal,
      texcoord: texcoord,
    }
  }
}

impl Vec3 {
  new :: fn(x: f32, y, z) -> #self {
    return .{
      x: x,
      y: y,
      z: z,
    }
  }
}

impl Vec2 {
  new :: fn(x: f32, y) -> #self {
    return .{
      x: x,
      y: y,
    }
  }
}

cube :: fn(scale: f32) -> Vertex[] {
  return Vertex[]::init(.[
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, 0.0, -scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, 0.0, scale), Vec2::new(0.0, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(-scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(scale, 0.0, 0.0), Vec2::new(scale, 0.0)),

    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2),  (scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2), -(scale / 2), -(scale / 2)), Vec3::new(0.0, -scale, 0.0), Vec2::new(0.0, scale)),

    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, scale)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new( (scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(scale, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2),  (scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, 0.0)),
    Vertex::new(Vec3::new(-(scale / 2),  (scale / 2), -(scale / 2)), Vec3::new(0.0, scale, 0.0), Vec2::new(0.0, scale))
  ]);
}


main :: fn() {

  cubular := cube(1.0);

  for vert in cubular {
    formatted := format("pos: % % %, normal: % % %, texcoord: % %", .[
      any::new(&vert.position.x),
      any::new(&vert.position.y),
      any::new(&vert.position.z),

      any::new(&vert.normal.x),
      any::new(&vert.normal.y),
      any::new(&vert.normal.z),

      any::new(&vert.texcoord.x),
      any::new(&vert.texcoord.y),
    ]);
    println(formatted);
    formatted.deinit();
  }
}